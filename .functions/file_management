
####################################
# Movement
####################################


# Terminal and Navigation
# Alias' for easier navigation

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias cd=cd_func



# cd function for providing easy movement and history.


cd_func ()
{
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}


####################################
# Recovering Files
####################################


# Un-delete File
undel_func(){
        local string="$1"
        # Device: i.e. /dev/sda
        local device="$2"
        echo "Searching for deleted file with string $1"
        # *"Attempt"* to recover an accidentally removed file.
        sudo fgrep --binary-files=text -C 2000 "${string}" "${device}" > recovereddata.out
}
alias undelete=undel_func


# recover deleted media files from external device
# repair mp4's on that device
undel_media() {
    #sudo foremost -i /dev/sdd1 -o ~/temp/media
    local INPUT="$1"
    local OUTPUT_PATH="$2"
    sudo foremost -i ${INPUT} -o ${OUTPUT_PATH}
    sudo chown -R s2e ${OUTPUT_PATH}
    cd ${OUTPUT_PATH}/mp4
    # Repair all mp4's found
    find . |grep xargs -I % ffmpg -i % -o %.new.mp4
    # TODO - Run repair function on all media
}

####################################
# Extracting Compressed Files
####################################



# Extract a compressed file
extract() {
        if [ -f $1 ] ; then
                case $1 in
                        *.tar.bz2) tar xvjf $1 ;;
                        *.tar.gz) tar xvzf $1 ;;
                        *.tar.xz) tar xvJf $1 ;;
                        *.xz) unxz -v $1 ;;
                        *.bz2) bunzip2 $1 ;;
                        *.rar) unrar x $1 ;;
                        *.gz) gunzip $1 ;;
                        *.tar) tar xvf $1 ;;
                        *.tbz2) tar xvjf $1 ;;
                        *.tgz) tar xvzf $1 ;;
                        *.zip) unzip $1 ;;
                        *.Z) uncompress $1;;
                        *.7z) 7z x $1 ;;
                        *) echo "'$1' cannot be extracted via >extract<" ;;
                esac
        else
                echo "'$1' is not a valid file"
        fi
}


unzip_long_name() {
    ZIPFILE="$1"
    LONG_NAME="$2"

    long_fname=${LONG_NAME%.*}
    unzip -p -j -c "$ZIPFILE" "$LONG_NAME" > "${long_fname:0:250}.${LONG_NAME##*.}"
}

unzip_all_long_names() {
    zipinfo -2 "$1" | while read i;
    do
        long_fname=${i%.*}
        unzip -p -j -c "$1" "$i" > "${long_fname:0:250}.${i##*.}"
    done;
}


# Compare original and gzipped file size
function gz() {
        local origsize=$(wc -c < "$1");
        local gzipsize=$(gzip -c "$1" | wc -c);
        local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
        printf "orig: %d bytes\n" "$origsize";
        printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}


####################################
# Metadata of files
####################################


# Nuke All Metadata
nuke_all_metadata() {
    while true; do
        echo "This will erase the metadata from all files with extensions found in this folder."
        read -p "Do you really want to run this script? [y/n]" yn
        case $yn in
            [Yy]* ) local NUKEIT="true"; break;;
            [Nn]* ) local NUKEIT="NO";  break;;
            * ) echo "Please answer yes or no.";;
        esac
    done
    if [[ "${NUKEIT}" == "true" ]]; then
        for i in *.*;
        do echo "Nuking metadata for $i";
           exiftool -all= "$i";
        done
    fi
}


####################################
# Moving Files
####################################

# DD-Status

# Get the status of a currently running dd process
# Use in a terminal NOT running the current dd!
# Usage: ddstat
#alias ddstat="sudo kill -USR1 `pgrep -l '^dd$' | cut -f 1 -d \" \"`"
alias ddstat="sudo progress -m"

# Burn USB with alert
burnusb() {
        sudo dd if=$1 of=$2 bs=4M conv=sync
        sync
        ding
        notify-send -u critical 'burnusb' 'done'
}


####################################
# Compare contents of two folders
####################################

compare_folder_contents() {
    comm -3 <(ls -1 "$1" ) <(ls -1 "$2" )
}

compare_folder_contents_recursive() {
    comm -3 <(tree --noreport -I ".git" -ia "$1" | sort ) <(tree --noreport -I ".git" -ai "$2" | sort )
}


####################################
# Find common patterns
####################################

find_changed_here_x_days_ago() {
    local days_ago="$1"
    find . -type f -newermt $(date --date="${days_ago} days ago" +%F) ! -newermt $(date +%F)
}

